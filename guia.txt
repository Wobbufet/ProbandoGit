SI BORRAS LA TERMINAL NO SE BORRA LOS AVANCES, solo debes estar en la carpeta correcta

pwd         - para saber donde se esta
cd "        - para navegar (..)"arriba" (name)"escritorio al cual se va"
ls          - para ver lo que contiene la carpeta
git init    - inicia el repositorio en la carpeta seleccionada
            crea la carpeta ".git" en invisible, NO TOCAR ESA CARPETA
git status  - para ver los archivos que se tienen
            rojo significa que esta en el aire, no se agrego al entorno de trabajo
git add ""  - Agregas el archivo a tu entorno de trabajo. (git add guia.go)
            aparecerá en azul pues ya se incluyó

git commit  - crea un punto de control del código, pues puede tener cambios
        así que primero se crea unarchivo para configurar

git config --global user.email caceresgabriel2001@gmail.com     -si se escribe mal solo se vuelve a poner, ya que se sobreescribe
git config --global user.name Gabriel

git commit  - abre el editor de código, si no deja editar hay que presionar la tecla 'I'
            cuando se termine se presiona "Esc" y se pone ":wq" (write-quitw)
            al acabar debe haber creado IDs para diferenciar las versiones que se guardan

git log     - para ver los commits que se han creado (el de arriba es el mas reciente)
            si ejecuto alguna intrucción dirá que no hay cambios y no hay nada que hacer,
            pero si hacemos cambios en el código, al poner 'status' veremos que estará en rojo

git checkout -- guia.go     - esto retornará a su estado anterior el archivo, al punto en el que se guardó con "add"

git diff guia.go        - para ver las diferencias hechas en los archivos
                    rojo: lo que se quitó       verde: lo que se agregó
                    para salir de ese menú se preiona la tecla "Q" (quit)

Para crear una sección en donde no queremos que haga cambios, creamos el archivo ".gitignore"
para poner los archivos o carpetas que se desean ignorar.
Pero para eso debo de poner "git add .gitignore"
si se agregan más cosas y se incluyen en .gitignore se dirá que fue modificado el archivo,
pero no mostrará el nuevo que se quiere ignorar

git commit -m "texto más rápido"        -de esta forma no hay que entrar al editor

git branch              -muestra la carpeta 'master' la cual es el proyecto desarrollado, con archivos y carpetas
git branch login        -creo una version alternativa llamada login (culquier nombre puedo darle), se confirma con branch
git chechout login      -se cambia a de master a login

comienzo a generar cambios, como agregar archivos y carpetas. (ojo, las carpetas vacias no las considera)
para agregar rápidamente todos puedo poner: git add .
eso agregará todos los que me refleje en color rojo en status.
Hay que crear un commit para que haya diferencias, sino no cambian las cosas
luego se vuelve al master para ver como los achivos desaparecen, pues se volvió a una version anterior

-------------------------------------------------------------

Para subirlo a github hay que hacer un parde cosas:
crear lo en github, luego copiar la dirección que da y poner lo siguiente:

git remote add origin https://github.com/Wobbufet/ProbandoGit.git
git push -u origin master

para traerlo de github se pone: git clone https.....